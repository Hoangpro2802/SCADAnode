#include <ESP8266WiFi.h>
#include <ModbusIP_ESP8266.h>

const char* ssid = "Viet Hoang";
const char* password = "1234abcd";

#define R1 1
#define R2 2
#define R3 3
#define R4 4
#define R5 5
#define R6 6
#define R7 7
#define R8 8
#define R10 10

const int pwmPin = 14;
const int nutNhan = 2;

int pwmLevel = 0;
bool systemEnabled = false;
bool toggleState = false;
unsigned long lastLogTime = 0;
const unsigned long logInterval = 2000;
String lastPwmState = "";

ModbusIP mb;

void setup() {
  Serial.begin(115200);
  pinMode(nutNhan, INPUT_PULLUP);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
  mb.server();
  mb.addHreg(R1, 0);
  mb.addHreg(R2, 0);
  mb.addHreg(R3, 0);
  mb.addHreg(R4, 1);
  mb.addHreg(R5, 0);
  mb.addHreg(R6, 0);
  mb.addHreg(R7, 0);
  mb.addHreg(R8, 0);
  mb.addHreg(R10, 0);
  pinMode(pwmPin, OUTPUT);
  analogWrite(pwmPin, 0);
  toggleState = false;
  systemEnabled = toggleState;
  mb.Hreg(R4, 1);
  mb.Hreg(R10, systemEnabled ? 1 : 0);
}

void loop() {
  mb.task();
  handleToggleInputs();
  updatePWMOutput();
  updateSystemStatus();
  logRegisterValues();
  delay(10);
}

void handleToggleInputs() {
  static bool lastButtonState = HIGH;
  static bool lastR4State = true;
  static unsigned long lastToggleTime = 0;
  const unsigned long debounceTime = 200;
  bool currentButtonState = digitalRead(nutNhan);
  bool currentR4State = mb.Hreg(R4) == 1;

  if (currentButtonState == LOW && lastButtonState == HIGH && (millis() - lastToggleTime > debounceTime)) {
    toggleState = !toggleState;
    systemEnabled = toggleState;
    mb.Hreg(R4, 1);
    lastToggleTime = millis();
  }

  if (currentR4State == false && lastR4State == true && (millis() - lastToggleTime > debounceTime)) {
    toggleState = !toggleState;
    systemEnabled = toggleState;
    mb.Hreg(R4, 1);
    lastToggleTime = millis();
  }

  lastButtonState = currentButtonState;
  lastR4State = currentR4State;
}

void updatePWMOutput() {
  String currentPwmState = "";
  if (systemEnabled && mb.Hreg(R5) == 1) {
    if (mb.Hreg(R8) == 1 && mb.Hreg(R3) > 0) {
      pwmLevel = map(mb.Hreg(R3), 0, 100, 0, 1023);
      currentPwmState = "Chọn PWM3 (R3)";
    }
    else if (mb.Hreg(R7) == 1 && mb.Hreg(R2) > 0) {
      pwmLevel = map(mb.Hreg(R2), 0, 100, 0, 1023);
      currentPwmState = "Chọn PWM2 (R2)";
    }
    else if (mb.Hreg(R6) == 1 && mb.Hreg(R1) > 0) {
      pwmLevel = map(mb.Hreg(R1), 0, 100, 0, 1023);
      currentPwmState = "Chọn PWM1 (R1)";
    }
    else {
      pwmLevel = 0;
      currentPwmState = "Không chọn PWM (R6, R7, R8 = 0 hoặc R1, R2, R3 = 0)";
    }
  } else {
    pwmLevel = 0;
    currentPwmState = "PWM tắt (R4 hoặc R5 không phải 1)";
  }

  if (currentPwmState != lastPwmState) {
    Serial.println(currentPwmState);
    lastPwmState = currentPwmState;
  }
  analogWrite(pwmPin, pwmLevel);
}

void updateSystemStatus() {
  mb.Hreg(R10, systemEnabled ? 1 : 0);
}

void logRegisterValues() {
  if (millis() - lastLogTime >= logInterval) {
    lastLogTime = millis();
    Serial.println("\n=== TRẠNG THÁI HỆ THỐNG ===");
    Serial.printf("R1 (PWM1): %d%%\n", mb.Hreg(R1));
    Serial.printf("R2 (PWM2): %d%%\n", mb.Hreg(R2));
    Serial.printf("R3 (PWM3): %d%%\n", mb.Hreg(R3));
    Serial.printf("R4 (Toggle flag): %d\n", mb.Hreg(R4));
    Serial.printf("R5 (Safety flag): %d\n", mb.Hreg(R5));
    Serial.printf("R6 (Chọn PWM1): %d\n", mb.Hreg(R6));
    Serial.printf("R7 (Chọn PWM2): %d\n", mb.Hreg(R7));
    Serial.printf("R8 (Chọn PWM3): %d\n", mb.Hreg(R8));
    Serial.printf("R10 (Trạng thái hệ thống): %d\n", mb.Hreg(R10));
    Serial.printf("Trạng thái hệ thống: %s\n", systemEnabled ? "BẬT" : "TẮT");
    Serial.printf("Trạng thái toggleState: %d\n", toggleState);
    Serial.printf("Giá trị PWM thực: %d/1023\n", pwmLevel);
    Serial.println("==========================");
  }
}


#include <ESP8266WiFi.h>
#include <PubSubClient.h>

const char* ssid = "Viet Hoang";
const char* password = "1234abcd";
const char* mqtt_server = "192.168.1.100";
const int mqtt_port = 1883;
const char* mqtt_user = "hoang";
const char* mqtt_pass = "123";

WiFiClient espClient;
PubSubClient client(espClient);

const int led1 = 14;
const int led2 = 4;
const int led3 = 0;
const int buttonPin = 5;

bool systemEnabled = true;
bool lastButtonState = HIGH;
bool buttonPressed = false;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;
bool lastMqttButtonState = HIGH;
bool mqttButtonPressed = false;
unsigned long lastMqttDebounceTime = 0;
unsigned long lastPubTime = 0;
int distance = 0;
int threshold = 0;

void setup_wifi() {
  delay(10);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  String topicStr = String(topic);
  String data = "";
  for (int i = 0; i < length; i++) {
    data += (char)payload[i];
  }
  if (topicStr == "button") {
    bool currentMqttButtonState = (data == "0") ? LOW : HIGH;
    if (currentMqttButtonState != lastMqttButtonState) {
      lastMqttDebounceTime = millis();
    }
    if ((millis() - lastMqttDebounceTime) > debounceDelay) {
      if (currentMqttButtonState == LOW && !mqttButtonPressed) {
        mqttButtonPressed = true;
        toggleSystem();
      }
      if (currentMqttButtonState == HIGH && mqttButtonPressed) {
        mqttButtonPressed = false;
      }
    }
    lastMqttButtonState = currentMqttButtonState;
  }
  if (topicStr == "distance") {
    distance = data.toInt();
    updateLEDs();
  }
  if (topicStr == "level") {
    threshold = data.toInt();
    updateLEDs();
  }
}

void toggleSystem() {
  systemEnabled = !systemEnabled;
  String buttonState = systemEnabled ? "1" : "0";
  client.publish("button", buttonState.c_str());
  if (!systemEnabled) {
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
  } else {
    updateLEDs();
  }
}

void updateLEDs() {
  if (!systemEnabled) return;
  int level3 = threshold;
  int level2 = level3 + 3;
  int level1 = level2 + 3;
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(led3, LOW);
  if (distance <= level3) {
    digitalWrite(led3, HIGH);
  } else if (distance <= level2) {
    digitalWrite(led2, HIGH);
  } else if (distance <= level1) {
    digitalWrite(led1, HIGH);
  }
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pass)) {
      client.subscribe("distance");
      client.subscribe("level");
      client.subscribe("button");
    } else {
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(led3, LOW);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  int reading = digitalRead(buttonPin);
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == LOW && !buttonPressed) {
      buttonPressed = true;
      toggleSystem();
    }
    if (reading == HIGH && buttonPressed) {
      buttonPressed = false;
    }
  }
  lastButtonState = reading;
  if (millis() - lastPubTime > 4000) {
    lastPubTime = millis();
    String led1Status = digitalRead(led1) ? "1" : "0";
    String led2Status = digitalRead(led2) ? "1" : "0";
    String led3Status = digitalRead(led3) ? "1" : "0";
    client.publish("led1_status", led1Status.c_str());
    client.publish("led2_status", led2Status.c_str());
    client.publish("led3_status", led3Status.c_str());
  }
}
