#include <ESP8266WiFi.h>
#include <ModbusIP_ESP8266.h>

const char* ssid = "Viet Hoang";
const char* password = "1234abcd";

#define R1 1
#define R2 2
#define R3 3
#define R4 4
#define R5 5
#define R6 6
#define R7 7
#define R8 8
#define R10 10

const int pwmPin = 14;
const int nutNhan = 2;

int pwmLevel = 0;
bool systemEnabled = false;
bool toggleState = false;
unsigned long lastLogTime = 0;
const unsigned long logInterval = 2000;
String lastPwmState = "";

ModbusIP mb;

void setup() {
  Serial.begin(115200);
  pinMode(nutNhan, INPUT_PULLUP);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
  mb.server();
  mb.addHreg(R1, 0);
  mb.addHreg(R2, 0);
  mb.addHreg(R3, 0);
  mb.addHreg(R4, 1);
  mb.addHreg(R5, 0);
  mb.addHreg(R6, 0);
  mb.addHreg(R7, 0);
  mb.addHreg(R8, 0);
  mb.addHreg(R10, 0);
  pinMode(pwmPin, OUTPUT);
  analogWrite(pwmPin, 0);
  toggleState = false;
  systemEnabled = toggleState;
  mb.Hreg(R4, 1);
  mb.Hreg(R10, systemEnabled ? 1 : 0);
}

void loop() {
  mb.task();
  handleToggleInputs();
  updatePWMOutput();
  updateSystemStatus();
  logRegisterValues();
  delay(10);
}

void handleToggleInputs() {
  static bool lastButtonState = HIGH;
  static bool lastR4State = true;
  static unsigned long lastToggleTime = 0;
  const unsigned long debounceTime = 200;
  bool currentButtonState = digitalRead(nutNhan);
  bool currentR4State = mb.Hreg(R4) == 1;

  if (currentButtonState == LOW && lastButtonState == HIGH && (millis() - lastToggleTime > debounceTime)) {
    toggleState = !toggleState;
    systemEnabled = toggleState;
    mb.Hreg(R4, 1);
    lastToggleTime = millis();
  }

  if (currentR4State == false && lastR4State == true && (millis() - lastToggleTime > debounceTime)) {
    toggleState = !toggleState;
    systemEnabled = toggleState;
    mb.Hreg(R4, 1);
    lastToggleTime = millis();
  }

  lastButtonState = currentButtonState;
  lastR4State = currentR4State;
}

void updatePWMOutput() {
  String currentPwmState = "";
  if (systemEnabled && mb.Hreg(R5) == 1) {
    if (mb.Hreg(R8) == 1 && mb.Hreg(R3) > 0) {
      pwmLevel = map(mb.Hreg(R3), 0, 100, 0, 1023);
      currentPwmState = "Chọn PWM3 (R3)";
    }
    else if (mb.Hreg(R7) == 1 && mb.Hreg(R2) > 0) {
      pwmLevel = map(mb.Hreg(R2), 0, 100, 0, 1023);
      currentPwmState = "Chọn PWM2 (R2)";
    }
    else if (mb.Hreg(R6) == 1 && mb.Hreg(R1) > 0) {
      pwmLevel = map(mb.Hreg(R1), 0, 100, 0, 1023);
      currentPwmState = "Chọn PWM1 (R1)";
    }
    else {
      pwmLevel = 0;
      currentPwmState = "Không chọn PWM (R6, R7, R8 = 0 hoặc R1, R2, R3 = 0)";
    }
  } else {
    pwmLevel = 0;
    currentPwmState = "PWM tắt (R4 hoặc R5 không phải 1)";
  }

  if (currentPwmState != lastPwmState) {
    Serial.println(currentPwmState);
    lastPwmState = currentPwmState;
  }
  analogWrite(pwmPin, pwmLevel);
}

void updateSystemStatus() {
  mb.Hreg(R10, systemEnabled ? 1 : 0);
}

void logRegisterValues() {
  if (millis() - lastLogTime >= logInterval) {
    lastLogTime = millis();
    Serial.println("\n=== TRẠNG THÁI HỆ THỐNG ===");
    Serial.printf("R1 (PWM1): %d%%\n", mb.Hreg(R1));
    Serial.printf("R2 (PWM2): %d%%\n", mb.Hreg(R2));
    Serial.printf("R3 (PWM3): %d%%\n", mb.Hreg(R3));
    Serial.printf("R4 (Toggle flag): %d\n", mb.Hreg(R4));
    Serial.printf("R5 (Safety flag): %d\n", mb.Hreg(R5));
    Serial.printf("R6 (Chọn PWM1): %d\n", mb.Hreg(R6));
    Serial.printf("R7 (Chọn PWM2): %d\n", mb.Hreg(R7));
    Serial.printf("R8 (Chọn PWM3): %d\n", mb.Hreg(R8));
    Serial.printf("R10 (Trạng thái hệ thống): %d\n", mb.Hreg(R10));
    Serial.printf("Trạng thái hệ thống: %s\n", systemEnabled ? "BẬT" : "TẮT");
    Serial.printf("Trạng thái toggleState: %d\n", toggleState);
    Serial.printf("Giá trị PWM thực: %d/1023\n", pwmLevel);
    Serial.println("==========================");
  }
}