#include <ESP8266WiFi.h>
#include <PubSubClient.h>

const char* ssid = "Viet Hoang";
const char* password = "1234abcd";
const char* mqtt_server = "192.168.1.100";
const int mqtt_port = 1883;
const char* mqtt_user = "hoang";
const char* mqtt_pass = "123";

WiFiClient espClient;
PubSubClient client(espClient);

const int led1 = 14;
const int led2 = 4;
const int led3 = 0;
const int buttonPin = 5;

bool systemEnabled = true;
bool lastButtonState = HIGH;
bool buttonPressed = false;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;
bool lastMqttButtonState = HIGH;
bool mqttButtonPressed = false;
unsigned long lastMqttDebounceTime = 0;
unsigned long lastPubTime = 0;
int distance = 0;
int threshold = 0;

void setup_wifi() {
  delay(10);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  String topicStr = String(topic);
  String data = "";
  for (int i = 0; i < length; i++) {
    data += (char)payload[i];
  }
  if (topicStr == "button") {
    bool currentMqttButtonState = (data == "0") ? LOW : HIGH;
    if (currentMqttButtonState != lastMqttButtonState) {
      lastMqttDebounceTime = millis();
    }
    if ((millis() - lastMqttDebounceTime) > debounceDelay) {
      if (currentMqttButtonState == LOW && !mqttButtonPressed) {
        mqttButtonPressed = true;
        toggleSystem();
      }
      if (currentMqttButtonState == HIGH && mqttButtonPressed) {
        mqttButtonPressed = false;
      }
    }
    lastMqttButtonState = currentMqttButtonState;
  }
  if (topicStr == "distance") {
    distance = data.toInt();
    updateLEDs();
  }
  if (topicStr == "level") {
    threshold = data.toInt();
    updateLEDs();
  }
}

void toggleSystem() {
  systemEnabled = !systemEnabled;
  String buttonState = systemEnabled ? "1" : "0";
  client.publish("button", buttonState.c_str());
  if (!systemEnabled) {
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
  } else {
    updateLEDs();
  }
}

void updateLEDs() {
  if (!systemEnabled) return;
  int level3 = threshold;
  int level2 = level3 + 3;
  int level1 = level2 + 3;
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(led3, LOW);
  if (distance <= level3) {
    digitalWrite(led3, HIGH);
  } else if (distance <= level2) {
    digitalWrite(led2, HIGH);
  } else if (distance <= level1) {
    digitalWrite(led1, HIGH);
  }
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pass)) {
      client.subscribe("distance");
      client.subscribe("level");
      client.subscribe("button");
    } else {
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(led3, LOW);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  int reading = digitalRead(buttonPin);
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == LOW && !buttonPressed) {
      buttonPressed = true;
      toggleSystem();
    }
    if (reading == HIGH && buttonPressed) {
      buttonPressed = false;
    }
  }
  lastButtonState = reading;
  if (millis() - lastPubTime > 4000) {
    lastPubTime = millis();
    String led1Status = digitalRead(led1) ? "1" : "0";
    String led2Status = digitalRead(led2) ? "1" : "0";
    String led3Status = digitalRead(led3) ? "1" : "0";
    client.publish("led1_status", led1Status.c_str());
    client.publish("led2_status", led2Status.c_str());
    client.publish("led3_status", led3Status.c_str());
  }
}